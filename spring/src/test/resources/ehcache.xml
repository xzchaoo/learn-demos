<ehcache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../config/ehcache.xsd">

	<!--
	The following attributes are required.

	name:
	Sets the name of the cache. This is used to identify the cache. It must be unique.

	maxElementsInMemory:
	Sets the maximum number of objects that will be created in memory (0 == no limit)

	maxElementsOnDisk:
	Sets the maximum number of objects that will be maintained in the DiskStore
	The default value is zero, meaning unlimited.

	eternal:
	Sets whether elements are eternal. If eternal,  timeouts are ignored and the
	element is never expired.

	overflowToDisk:
	Sets whether elements can overflow to disk when the in-memory cache
	has reached the maxInMemory limit.

	The following attributes are optional.

	timeToIdleSeconds:
	Sets the time to idle for an element before it expires.
	i.e. The maximum amount of time between accesses before an element expires
	Is only used if the element is not eternal.
	Optional attribute. A value of 0 means that an Element can idle for infinity.
	The default value is 0.

	timeToLiveSeconds:
	Sets the time to live for an element before it expires.
	i.e. The maximum time between creation time and when an element expires.
	Is only used if the element is not eternal.
	Optional attribute. A value of 0 means that and Element can live for infinity.
	The default value is 0.

	diskPersistent:
	Whether the disk store persists between restarts of the Virtual Machine.
	The default value is false.

	diskExpiryThreadIntervalSeconds:
	The number of seconds between runs of the disk expiry thread. The default value
	is 120 seconds.

	diskSpoolBufferSizeMB:
	This is the limit2 to allocate the DiskStore for a spool buffer. Writes are made
	to this area and then asynchronously written to disk. The default limit2 is 30MB.
	Each spool buffer is used only by its cache. If you get OutOfMemory errors consider
	lowering this value. To improve DiskStore performance consider increasing it. Trace level
	logging in the DiskStore will show if put back ups are occurring.

	memoryStoreEvictionPolicy:
	Policy would be enforced upon reaching the maxElementsInMemory limit. Default
	policy is Least Recently Used (specified as LRU). Other policies available -
	First In First Out (specified as FIFO) and Less Frequently Used
	(specified as LFU)

	Cache elements can also contain sub elements which take the same format of a factory class
	and properties. Defined sub-elements are:

	* cacheEventListenerFactory - Enables registration of listeners for cache events, such as
	  put, remove, update, and expire.

	* bootstrapCacheLoaderFactory - Specifies a BootstrapCacheLoader, which is called by a
	  cache on initialisation to prepopulate itself.

	Each cache that will be distributed needs to set a cache event listener which replicates
	messages to the other CacheManager peers. For the built-in RMI implementation this is done
	by adding a cacheEventListenerFactory element of type RMICacheReplicatorFactory to each
	distributed cache's configuration as per the following example:

	<cacheEventListenerFactory class="net.sf.ehcache.distribution.RMICacheReplicatorFactory"
		 properties="replicateAsynchronously=true,
		 replicatePuts=true,
		 replicateUpdates=true,
		 replicateUpdatesViaCopy=true,
		 replicateRemovals=true "/>

	Mandatory Default Cache configuration. These settings will be applied to caches
	created programmtically using CacheManager.add(String cacheName)
	-->
	<defaultCache
		maxElementsInMemory="10000"
		eternal="false"
		timeToIdleSeconds="120"
		timeToLiveSeconds="120"
		memoryStoreEvictionPolicy="LRU">
		<persistence strategy="none"/>
	</defaultCache>

	<cache
		name="a"
		maxElementsInMemory="10000"
		eternal="false"
		timeToIdleSeconds="120"
		timeToLiveSeconds="120"
		memoryStoreEvictionPolicy="LRU">
		<persistence strategy="none"/>
	</cache>
</ehcache>
